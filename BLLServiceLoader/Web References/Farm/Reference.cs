//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Irmac.MailingCycle.BLLServiceLoader.Farm {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FarmServiceSoap", Namespace="http://localhost:3130/BLLService/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BaseInfo))]
    public partial class FarmService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFarmListForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFarmSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchivedFarmSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchivedFarmSummaryDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlotListForFarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchivedPlotSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchivedPlotSummaryDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailingPlanListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFarmListFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFarmPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePlotForMoveContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFarmPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFarmDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlotCountForFarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlotListSummaryForFarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlotDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFarmExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactCountForPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPlotExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserIdForFarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserIdForPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactListForPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContactDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestoreContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchivedContactListForPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveContactToPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFarmNameDuplicateWhileAddingNewFarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFarmNameDuplicateWhileEditingFarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPlotNameDuplicateWhileAddingNewPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPlotNameDuplicateWhileEditingPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportContactListToExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateContactListFromArrayOfContactIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFarmPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestoreFarmPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePlotContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestorePlotContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsDefaultPlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback TotalActiveFarmCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback TotalArchivedFarmCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback TotalActivePlotCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback TotalArchivedPlotCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback TotalActiveContactCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback TotalArchivedContactCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportForFarmDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSearchFarmDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFirmUpStatusSummaryDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailingLabelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFarmDataReportDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeleteContactConsiquenceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FarmService() {
            this.Url = global::Irmac.MailingCycle.BLLServiceLoader.Properties.Settings.Default.Irmac_MailingCycle_BLLServiceLoader_Farm_FarmService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetUserNameCompletedEventHandler GetUserNameCompleted;
        
        /// <remarks/>
        public event GetFarmListForUserCompletedEventHandler GetFarmListForUserCompleted;
        
        /// <remarks/>
        public event GetFarmSummaryCompletedEventHandler GetFarmSummaryCompleted;
        
        /// <remarks/>
        public event GetArchivedFarmSummaryCompletedEventHandler GetArchivedFarmSummaryCompleted;
        
        /// <remarks/>
        public event GetArchivedFarmSummaryDetailsCompletedEventHandler GetArchivedFarmSummaryDetailsCompleted;
        
        /// <remarks/>
        public event GetPlotListForFarmCompletedEventHandler GetPlotListForFarmCompleted;
        
        /// <remarks/>
        public event GetArchivedPlotSummaryCompletedEventHandler GetArchivedPlotSummaryCompleted;
        
        /// <remarks/>
        public event GetArchivedPlotSummaryDetailsCompletedEventHandler GetArchivedPlotSummaryDetailsCompleted;
        
        /// <remarks/>
        public event GetMailingPlanListCompletedEventHandler GetMailingPlanListCompleted;
        
        /// <remarks/>
        public event GetFarmListFromFileCompletedEventHandler GetFarmListFromFileCompleted;
        
        /// <remarks/>
        public event CreateFarmPlotCompletedEventHandler CreateFarmPlotCompleted;
        
        /// <remarks/>
        public event CreatePlotCompletedEventHandler CreatePlotCompleted;
        
        /// <remarks/>
        public event CreatePlotForMoveContactsCompletedEventHandler CreatePlotForMoveContactsCompleted;
        
        /// <remarks/>
        public event UpdatePlotCompletedEventHandler UpdatePlotCompleted;
        
        /// <remarks/>
        public event UpdateFarmPlotCompletedEventHandler UpdateFarmPlotCompleted;
        
        /// <remarks/>
        public event GetFarmDetailCompletedEventHandler GetFarmDetailCompleted;
        
        /// <remarks/>
        public event GetPlotCountForFarmCompletedEventHandler GetPlotCountForFarmCompleted;
        
        /// <remarks/>
        public event GetPlotListSummaryForFarmCompletedEventHandler GetPlotListSummaryForFarmCompleted;
        
        /// <remarks/>
        public event GetPlotDetailCompletedEventHandler GetPlotDetailCompleted;
        
        /// <remarks/>
        public event IsFarmExistsCompletedEventHandler IsFarmExistsCompleted;
        
        /// <remarks/>
        public event GetContactCountForPlotCompletedEventHandler GetContactCountForPlotCompleted;
        
        /// <remarks/>
        public event IsPlotExistsCompletedEventHandler IsPlotExistsCompleted;
        
        /// <remarks/>
        public event GetUserIdForFarmCompletedEventHandler GetUserIdForFarmCompleted;
        
        /// <remarks/>
        public event GetUserIdForPlotCompletedEventHandler GetUserIdForPlotCompleted;
        
        /// <remarks/>
        public event GetContactListForPlotCompletedEventHandler GetContactListForPlotCompleted;
        
        /// <remarks/>
        public event GetContactDetailsCompletedEventHandler GetContactDetailsCompleted;
        
        /// <remarks/>
        public event UpdateContactDetailsCompletedEventHandler UpdateContactDetailsCompleted;
        
        /// <remarks/>
        public event AddContactCompletedEventHandler AddContactCompleted;
        
        /// <remarks/>
        public event DeleteContactCompletedEventHandler DeleteContactCompleted;
        
        /// <remarks/>
        public event RestoreContactCompletedEventHandler RestoreContactCompleted;
        
        /// <remarks/>
        public event GetArchivedContactListForPlotCompletedEventHandler GetArchivedContactListForPlotCompleted;
        
        /// <remarks/>
        public event MoveContactToPlotCompletedEventHandler MoveContactToPlotCompleted;
        
        /// <remarks/>
        public event DeleteFarmCompletedEventHandler DeleteFarmCompleted;
        
        /// <remarks/>
        public event DeletePlotCompletedEventHandler DeletePlotCompleted;
        
        /// <remarks/>
        public event IsFarmNameDuplicateWhileAddingNewFarmCompletedEventHandler IsFarmNameDuplicateWhileAddingNewFarmCompleted;
        
        /// <remarks/>
        public event IsFarmNameDuplicateWhileEditingFarmCompletedEventHandler IsFarmNameDuplicateWhileEditingFarmCompleted;
        
        /// <remarks/>
        public event IsPlotNameDuplicateWhileAddingNewPlotCompletedEventHandler IsPlotNameDuplicateWhileAddingNewPlotCompleted;
        
        /// <remarks/>
        public event IsPlotNameDuplicateWhileEditingPlotCompletedEventHandler IsPlotNameDuplicateWhileEditingPlotCompleted;
        
        /// <remarks/>
        public event ExportContactListToExcelCompletedEventHandler ExportContactListToExcelCompleted;
        
        /// <remarks/>
        public event GenerateContactListFromArrayOfContactIDCompletedEventHandler GenerateContactListFromArrayOfContactIDCompleted;
        
        /// <remarks/>
        public event DeleteFarmPlotCompletedEventHandler DeleteFarmPlotCompleted;
        
        /// <remarks/>
        public event RestoreFarmPlotCompletedEventHandler RestoreFarmPlotCompleted;
        
        /// <remarks/>
        public event DeletePlotContactCompletedEventHandler DeletePlotContactCompleted;
        
        /// <remarks/>
        public event RestorePlotContactCompletedEventHandler RestorePlotContactCompleted;
        
        /// <remarks/>
        public event IsDefaultPlotCompletedEventHandler IsDefaultPlotCompleted;
        
        /// <remarks/>
        public event TotalActiveFarmCountCompletedEventHandler TotalActiveFarmCountCompleted;
        
        /// <remarks/>
        public event TotalArchivedFarmCountCompletedEventHandler TotalArchivedFarmCountCompleted;
        
        /// <remarks/>
        public event TotalActivePlotCountCompletedEventHandler TotalActivePlotCountCompleted;
        
        /// <remarks/>
        public event TotalArchivedPlotCountCompletedEventHandler TotalArchivedPlotCountCompleted;
        
        /// <remarks/>
        public event TotalActiveContactCountCompletedEventHandler TotalActiveContactCountCompleted;
        
        /// <remarks/>
        public event TotalArchivedContactCountCompletedEventHandler TotalArchivedContactCountCompleted;
        
        /// <remarks/>
        public event ReportForFarmDetailsCompletedEventHandler ReportForFarmDetailsCompleted;
        
        /// <remarks/>
        public event GetSearchFarmDataCompletedEventHandler GetSearchFarmDataCompleted;
        
        /// <remarks/>
        public event GetFirmUpStatusSummaryDetailsCompletedEventHandler GetFirmUpStatusSummaryDetailsCompleted;
        
        /// <remarks/>
        public event GetMailingLabelsCompletedEventHandler GetMailingLabelsCompleted;
        
        /// <remarks/>
        public event GetFarmDataReportDataCompletedEventHandler GetFarmDataReportDataCompleted;
        
        /// <remarks/>
        public event GetDeleteContactConsiquenceCompletedEventHandler GetDeleteContactConsiquenceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetUserName", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserName(int userId) {
            object[] results = this.Invoke("GetUserName", new object[] {
                        userId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserNameAsync(int userId) {
            this.GetUserNameAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetUserNameAsync(int userId, object userState) {
            if ((this.GetUserNameOperationCompleted == null)) {
                this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
            }
            this.InvokeAsync("GetUserName", new object[] {
                        userId}, this.GetUserNameOperationCompleted, userState);
        }
        
        private void OnGetUserNameOperationCompleted(object arg) {
            if ((this.GetUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetFarmListForUser", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmInfo[] GetFarmListForUser(int userId) {
            object[] results = this.Invoke("GetFarmListForUser", new object[] {
                        userId});
            return ((FarmInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFarmListForUserAsync(int userId) {
            this.GetFarmListForUserAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetFarmListForUserAsync(int userId, object userState) {
            if ((this.GetFarmListForUserOperationCompleted == null)) {
                this.GetFarmListForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFarmListForUserOperationCompleted);
            }
            this.InvokeAsync("GetFarmListForUser", new object[] {
                        userId}, this.GetFarmListForUserOperationCompleted, userState);
        }
        
        private void OnGetFarmListForUserOperationCompleted(object arg) {
            if ((this.GetFarmListForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFarmListForUserCompleted(this, new GetFarmListForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetFarmSummary", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmInfo[] GetFarmSummary(int userId) {
            object[] results = this.Invoke("GetFarmSummary", new object[] {
                        userId});
            return ((FarmInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFarmSummaryAsync(int userId) {
            this.GetFarmSummaryAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetFarmSummaryAsync(int userId, object userState) {
            if ((this.GetFarmSummaryOperationCompleted == null)) {
                this.GetFarmSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFarmSummaryOperationCompleted);
            }
            this.InvokeAsync("GetFarmSummary", new object[] {
                        userId}, this.GetFarmSummaryOperationCompleted, userState);
        }
        
        private void OnGetFarmSummaryOperationCompleted(object arg) {
            if ((this.GetFarmSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFarmSummaryCompleted(this, new GetFarmSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetArchivedFarmSummary", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmInfo[] GetArchivedFarmSummary(int userId) {
            object[] results = this.Invoke("GetArchivedFarmSummary", new object[] {
                        userId});
            return ((FarmInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArchivedFarmSummaryAsync(int userId) {
            this.GetArchivedFarmSummaryAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetArchivedFarmSummaryAsync(int userId, object userState) {
            if ((this.GetArchivedFarmSummaryOperationCompleted == null)) {
                this.GetArchivedFarmSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchivedFarmSummaryOperationCompleted);
            }
            this.InvokeAsync("GetArchivedFarmSummary", new object[] {
                        userId}, this.GetArchivedFarmSummaryOperationCompleted, userState);
        }
        
        private void OnGetArchivedFarmSummaryOperationCompleted(object arg) {
            if ((this.GetArchivedFarmSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchivedFarmSummaryCompleted(this, new GetArchivedFarmSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetArchivedFarmSummaryDetails", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmInfo GetArchivedFarmSummaryDetails(int farmId) {
            object[] results = this.Invoke("GetArchivedFarmSummaryDetails", new object[] {
                        farmId});
            return ((FarmInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetArchivedFarmSummaryDetailsAsync(int farmId) {
            this.GetArchivedFarmSummaryDetailsAsync(farmId, null);
        }
        
        /// <remarks/>
        public void GetArchivedFarmSummaryDetailsAsync(int farmId, object userState) {
            if ((this.GetArchivedFarmSummaryDetailsOperationCompleted == null)) {
                this.GetArchivedFarmSummaryDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchivedFarmSummaryDetailsOperationCompleted);
            }
            this.InvokeAsync("GetArchivedFarmSummaryDetails", new object[] {
                        farmId}, this.GetArchivedFarmSummaryDetailsOperationCompleted, userState);
        }
        
        private void OnGetArchivedFarmSummaryDetailsOperationCompleted(object arg) {
            if ((this.GetArchivedFarmSummaryDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchivedFarmSummaryDetailsCompleted(this, new GetArchivedFarmSummaryDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetPlotListForFarm", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlotInfo[] GetPlotListForFarm(int farmId) {
            object[] results = this.Invoke("GetPlotListForFarm", new object[] {
                        farmId});
            return ((PlotInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPlotListForFarmAsync(int farmId) {
            this.GetPlotListForFarmAsync(farmId, null);
        }
        
        /// <remarks/>
        public void GetPlotListForFarmAsync(int farmId, object userState) {
            if ((this.GetPlotListForFarmOperationCompleted == null)) {
                this.GetPlotListForFarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlotListForFarmOperationCompleted);
            }
            this.InvokeAsync("GetPlotListForFarm", new object[] {
                        farmId}, this.GetPlotListForFarmOperationCompleted, userState);
        }
        
        private void OnGetPlotListForFarmOperationCompleted(object arg) {
            if ((this.GetPlotListForFarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlotListForFarmCompleted(this, new GetPlotListForFarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetArchivedPlotSummary", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlotInfo[] GetArchivedPlotSummary(int farmId) {
            object[] results = this.Invoke("GetArchivedPlotSummary", new object[] {
                        farmId});
            return ((PlotInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArchivedPlotSummaryAsync(int farmId) {
            this.GetArchivedPlotSummaryAsync(farmId, null);
        }
        
        /// <remarks/>
        public void GetArchivedPlotSummaryAsync(int farmId, object userState) {
            if ((this.GetArchivedPlotSummaryOperationCompleted == null)) {
                this.GetArchivedPlotSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchivedPlotSummaryOperationCompleted);
            }
            this.InvokeAsync("GetArchivedPlotSummary", new object[] {
                        farmId}, this.GetArchivedPlotSummaryOperationCompleted, userState);
        }
        
        private void OnGetArchivedPlotSummaryOperationCompleted(object arg) {
            if ((this.GetArchivedPlotSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchivedPlotSummaryCompleted(this, new GetArchivedPlotSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetArchivedPlotSummaryDetails", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlotInfo GetArchivedPlotSummaryDetails(int plotId) {
            object[] results = this.Invoke("GetArchivedPlotSummaryDetails", new object[] {
                        plotId});
            return ((PlotInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetArchivedPlotSummaryDetailsAsync(int plotId) {
            this.GetArchivedPlotSummaryDetailsAsync(plotId, null);
        }
        
        /// <remarks/>
        public void GetArchivedPlotSummaryDetailsAsync(int plotId, object userState) {
            if ((this.GetArchivedPlotSummaryDetailsOperationCompleted == null)) {
                this.GetArchivedPlotSummaryDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchivedPlotSummaryDetailsOperationCompleted);
            }
            this.InvokeAsync("GetArchivedPlotSummaryDetails", new object[] {
                        plotId}, this.GetArchivedPlotSummaryDetailsOperationCompleted, userState);
        }
        
        private void OnGetArchivedPlotSummaryDetailsOperationCompleted(object arg) {
            if ((this.GetArchivedPlotSummaryDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchivedPlotSummaryDetailsCompleted(this, new GetArchivedPlotSummaryDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetMailingPlanList", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MailingPlanInfo[] GetMailingPlanList() {
            object[] results = this.Invoke("GetMailingPlanList", new object[0]);
            return ((MailingPlanInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMailingPlanListAsync() {
            this.GetMailingPlanListAsync(null);
        }
        
        /// <remarks/>
        public void GetMailingPlanListAsync(object userState) {
            if ((this.GetMailingPlanListOperationCompleted == null)) {
                this.GetMailingPlanListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailingPlanListOperationCompleted);
            }
            this.InvokeAsync("GetMailingPlanList", new object[0], this.GetMailingPlanListOperationCompleted, userState);
        }
        
        private void OnGetMailingPlanListOperationCompleted(object arg) {
            if ((this.GetMailingPlanListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailingPlanListCompleted(this, new GetMailingPlanListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetFarmListFromFile", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContactInfo[] GetFarmListFromFile(string fileName, ContactFileType fileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes, int userId) {
            object[] results = this.Invoke("GetFarmListFromFile", new object[] {
                        fileName,
                        fileType,
                        bytes,
                        userId});
            return ((ContactInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFarmListFromFileAsync(string fileName, ContactFileType fileType, byte[] bytes, int userId) {
            this.GetFarmListFromFileAsync(fileName, fileType, bytes, userId, null);
        }
        
        /// <remarks/>
        public void GetFarmListFromFileAsync(string fileName, ContactFileType fileType, byte[] bytes, int userId, object userState) {
            if ((this.GetFarmListFromFileOperationCompleted == null)) {
                this.GetFarmListFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFarmListFromFileOperationCompleted);
            }
            this.InvokeAsync("GetFarmListFromFile", new object[] {
                        fileName,
                        fileType,
                        bytes,
                        userId}, this.GetFarmListFromFileOperationCompleted, userState);
        }
        
        private void OnGetFarmListFromFileOperationCompleted(object arg) {
            if ((this.GetFarmListFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFarmListFromFileCompleted(this, new GetFarmListFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/CreateFarmPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateFarmPlot(FarmInfo farm) {
            this.Invoke("CreateFarmPlot", new object[] {
                        farm});
        }
        
        /// <remarks/>
        public void CreateFarmPlotAsync(FarmInfo farm) {
            this.CreateFarmPlotAsync(farm, null);
        }
        
        /// <remarks/>
        public void CreateFarmPlotAsync(FarmInfo farm, object userState) {
            if ((this.CreateFarmPlotOperationCompleted == null)) {
                this.CreateFarmPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFarmPlotOperationCompleted);
            }
            this.InvokeAsync("CreateFarmPlot", new object[] {
                        farm}, this.CreateFarmPlotOperationCompleted, userState);
        }
        
        private void OnCreateFarmPlotOperationCompleted(object arg) {
            if ((this.CreateFarmPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFarmPlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/CreatePlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreatePlot(PlotInfo plot) {
            this.Invoke("CreatePlot", new object[] {
                        plot});
        }
        
        /// <remarks/>
        public void CreatePlotAsync(PlotInfo plot) {
            this.CreatePlotAsync(plot, null);
        }
        
        /// <remarks/>
        public void CreatePlotAsync(PlotInfo plot, object userState) {
            if ((this.CreatePlotOperationCompleted == null)) {
                this.CreatePlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePlotOperationCompleted);
            }
            this.InvokeAsync("CreatePlot", new object[] {
                        plot}, this.CreatePlotOperationCompleted, userState);
        }
        
        private void OnCreatePlotOperationCompleted(object arg) {
            if ((this.CreatePlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/CreatePlotForMoveContacts", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreatePlotForMoveContacts(PlotInfo plot) {
            object[] results = this.Invoke("CreatePlotForMoveContacts", new object[] {
                        plot});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePlotForMoveContactsAsync(PlotInfo plot) {
            this.CreatePlotForMoveContactsAsync(plot, null);
        }
        
        /// <remarks/>
        public void CreatePlotForMoveContactsAsync(PlotInfo plot, object userState) {
            if ((this.CreatePlotForMoveContactsOperationCompleted == null)) {
                this.CreatePlotForMoveContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePlotForMoveContactsOperationCompleted);
            }
            this.InvokeAsync("CreatePlotForMoveContacts", new object[] {
                        plot}, this.CreatePlotForMoveContactsOperationCompleted, userState);
        }
        
        private void OnCreatePlotForMoveContactsOperationCompleted(object arg) {
            if ((this.CreatePlotForMoveContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePlotForMoveContactsCompleted(this, new CreatePlotForMoveContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/UpdatePlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePlot(PlotInfo plot) {
            this.Invoke("UpdatePlot", new object[] {
                        plot});
        }
        
        /// <remarks/>
        public void UpdatePlotAsync(PlotInfo plot) {
            this.UpdatePlotAsync(plot, null);
        }
        
        /// <remarks/>
        public void UpdatePlotAsync(PlotInfo plot, object userState) {
            if ((this.UpdatePlotOperationCompleted == null)) {
                this.UpdatePlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePlotOperationCompleted);
            }
            this.InvokeAsync("UpdatePlot", new object[] {
                        plot}, this.UpdatePlotOperationCompleted, userState);
        }
        
        private void OnUpdatePlotOperationCompleted(object arg) {
            if ((this.UpdatePlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/UpdateFarmPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFarmPlot(FarmInfo farm) {
            this.Invoke("UpdateFarmPlot", new object[] {
                        farm});
        }
        
        /// <remarks/>
        public void UpdateFarmPlotAsync(FarmInfo farm) {
            this.UpdateFarmPlotAsync(farm, null);
        }
        
        /// <remarks/>
        public void UpdateFarmPlotAsync(FarmInfo farm, object userState) {
            if ((this.UpdateFarmPlotOperationCompleted == null)) {
                this.UpdateFarmPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFarmPlotOperationCompleted);
            }
            this.InvokeAsync("UpdateFarmPlot", new object[] {
                        farm}, this.UpdateFarmPlotOperationCompleted, userState);
        }
        
        private void OnUpdateFarmPlotOperationCompleted(object arg) {
            if ((this.UpdateFarmPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFarmPlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetFarmDetail", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmInfo GetFarmDetail(int FarmId) {
            object[] results = this.Invoke("GetFarmDetail", new object[] {
                        FarmId});
            return ((FarmInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFarmDetailAsync(int FarmId) {
            this.GetFarmDetailAsync(FarmId, null);
        }
        
        /// <remarks/>
        public void GetFarmDetailAsync(int FarmId, object userState) {
            if ((this.GetFarmDetailOperationCompleted == null)) {
                this.GetFarmDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFarmDetailOperationCompleted);
            }
            this.InvokeAsync("GetFarmDetail", new object[] {
                        FarmId}, this.GetFarmDetailOperationCompleted, userState);
        }
        
        private void OnGetFarmDetailOperationCompleted(object arg) {
            if ((this.GetFarmDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFarmDetailCompleted(this, new GetFarmDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetPlotCountForFarm", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetPlotCountForFarm(int farmId) {
            object[] results = this.Invoke("GetPlotCountForFarm", new object[] {
                        farmId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlotCountForFarmAsync(int farmId) {
            this.GetPlotCountForFarmAsync(farmId, null);
        }
        
        /// <remarks/>
        public void GetPlotCountForFarmAsync(int farmId, object userState) {
            if ((this.GetPlotCountForFarmOperationCompleted == null)) {
                this.GetPlotCountForFarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlotCountForFarmOperationCompleted);
            }
            this.InvokeAsync("GetPlotCountForFarm", new object[] {
                        farmId}, this.GetPlotCountForFarmOperationCompleted, userState);
        }
        
        private void OnGetPlotCountForFarmOperationCompleted(object arg) {
            if ((this.GetPlotCountForFarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlotCountForFarmCompleted(this, new GetPlotCountForFarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetPlotListSummaryForFarm", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlotInfo[] GetPlotListSummaryForFarm(int FarmId) {
            object[] results = this.Invoke("GetPlotListSummaryForFarm", new object[] {
                        FarmId});
            return ((PlotInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPlotListSummaryForFarmAsync(int FarmId) {
            this.GetPlotListSummaryForFarmAsync(FarmId, null);
        }
        
        /// <remarks/>
        public void GetPlotListSummaryForFarmAsync(int FarmId, object userState) {
            if ((this.GetPlotListSummaryForFarmOperationCompleted == null)) {
                this.GetPlotListSummaryForFarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlotListSummaryForFarmOperationCompleted);
            }
            this.InvokeAsync("GetPlotListSummaryForFarm", new object[] {
                        FarmId}, this.GetPlotListSummaryForFarmOperationCompleted, userState);
        }
        
        private void OnGetPlotListSummaryForFarmOperationCompleted(object arg) {
            if ((this.GetPlotListSummaryForFarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlotListSummaryForFarmCompleted(this, new GetPlotListSummaryForFarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetPlotDetail", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlotInfo GetPlotDetail(int plotId) {
            object[] results = this.Invoke("GetPlotDetail", new object[] {
                        plotId});
            return ((PlotInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlotDetailAsync(int plotId) {
            this.GetPlotDetailAsync(plotId, null);
        }
        
        /// <remarks/>
        public void GetPlotDetailAsync(int plotId, object userState) {
            if ((this.GetPlotDetailOperationCompleted == null)) {
                this.GetPlotDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlotDetailOperationCompleted);
            }
            this.InvokeAsync("GetPlotDetail", new object[] {
                        plotId}, this.GetPlotDetailOperationCompleted, userState);
        }
        
        private void OnGetPlotDetailOperationCompleted(object arg) {
            if ((this.GetPlotDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlotDetailCompleted(this, new GetPlotDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/IsFarmExists", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFarmExists(string farmName) {
            object[] results = this.Invoke("IsFarmExists", new object[] {
                        farmName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFarmExistsAsync(string farmName) {
            this.IsFarmExistsAsync(farmName, null);
        }
        
        /// <remarks/>
        public void IsFarmExistsAsync(string farmName, object userState) {
            if ((this.IsFarmExistsOperationCompleted == null)) {
                this.IsFarmExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFarmExistsOperationCompleted);
            }
            this.InvokeAsync("IsFarmExists", new object[] {
                        farmName}, this.IsFarmExistsOperationCompleted, userState);
        }
        
        private void OnIsFarmExistsOperationCompleted(object arg) {
            if ((this.IsFarmExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFarmExistsCompleted(this, new IsFarmExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetContactCountForPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetContactCountForPlot(int plotId) {
            object[] results = this.Invoke("GetContactCountForPlot", new object[] {
                        plotId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactCountForPlotAsync(int plotId) {
            this.GetContactCountForPlotAsync(plotId, null);
        }
        
        /// <remarks/>
        public void GetContactCountForPlotAsync(int plotId, object userState) {
            if ((this.GetContactCountForPlotOperationCompleted == null)) {
                this.GetContactCountForPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactCountForPlotOperationCompleted);
            }
            this.InvokeAsync("GetContactCountForPlot", new object[] {
                        plotId}, this.GetContactCountForPlotOperationCompleted, userState);
        }
        
        private void OnGetContactCountForPlotOperationCompleted(object arg) {
            if ((this.GetContactCountForPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactCountForPlotCompleted(this, new GetContactCountForPlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/IsPlotExists", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPlotExists(string plotName) {
            object[] results = this.Invoke("IsPlotExists", new object[] {
                        plotName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPlotExistsAsync(string plotName) {
            this.IsPlotExistsAsync(plotName, null);
        }
        
        /// <remarks/>
        public void IsPlotExistsAsync(string plotName, object userState) {
            if ((this.IsPlotExistsOperationCompleted == null)) {
                this.IsPlotExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPlotExistsOperationCompleted);
            }
            this.InvokeAsync("IsPlotExists", new object[] {
                        plotName}, this.IsPlotExistsOperationCompleted, userState);
        }
        
        private void OnIsPlotExistsOperationCompleted(object arg) {
            if ((this.IsPlotExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPlotExistsCompleted(this, new IsPlotExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetUserIdForFarm", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserIdForFarm(int farmId) {
            object[] results = this.Invoke("GetUserIdForFarm", new object[] {
                        farmId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserIdForFarmAsync(int farmId) {
            this.GetUserIdForFarmAsync(farmId, null);
        }
        
        /// <remarks/>
        public void GetUserIdForFarmAsync(int farmId, object userState) {
            if ((this.GetUserIdForFarmOperationCompleted == null)) {
                this.GetUserIdForFarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserIdForFarmOperationCompleted);
            }
            this.InvokeAsync("GetUserIdForFarm", new object[] {
                        farmId}, this.GetUserIdForFarmOperationCompleted, userState);
        }
        
        private void OnGetUserIdForFarmOperationCompleted(object arg) {
            if ((this.GetUserIdForFarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserIdForFarmCompleted(this, new GetUserIdForFarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetUserIdForPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserIdForPlot(int plotId) {
            object[] results = this.Invoke("GetUserIdForPlot", new object[] {
                        plotId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserIdForPlotAsync(int plotId) {
            this.GetUserIdForPlotAsync(plotId, null);
        }
        
        /// <remarks/>
        public void GetUserIdForPlotAsync(int plotId, object userState) {
            if ((this.GetUserIdForPlotOperationCompleted == null)) {
                this.GetUserIdForPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserIdForPlotOperationCompleted);
            }
            this.InvokeAsync("GetUserIdForPlot", new object[] {
                        plotId}, this.GetUserIdForPlotOperationCompleted, userState);
        }
        
        private void OnGetUserIdForPlotOperationCompleted(object arg) {
            if ((this.GetUserIdForPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserIdForPlotCompleted(this, new GetUserIdForPlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetContactListForPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContactInfo[] GetContactListForPlot(int plotId) {
            object[] results = this.Invoke("GetContactListForPlot", new object[] {
                        plotId});
            return ((ContactInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContactListForPlotAsync(int plotId) {
            this.GetContactListForPlotAsync(plotId, null);
        }
        
        /// <remarks/>
        public void GetContactListForPlotAsync(int plotId, object userState) {
            if ((this.GetContactListForPlotOperationCompleted == null)) {
                this.GetContactListForPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactListForPlotOperationCompleted);
            }
            this.InvokeAsync("GetContactListForPlot", new object[] {
                        plotId}, this.GetContactListForPlotOperationCompleted, userState);
        }
        
        private void OnGetContactListForPlotOperationCompleted(object arg) {
            if ((this.GetContactListForPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactListForPlotCompleted(this, new GetContactListForPlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetContactDetails", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContactInfo GetContactDetails(long contactId) {
            object[] results = this.Invoke("GetContactDetails", new object[] {
                        contactId});
            return ((ContactInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactDetailsAsync(long contactId) {
            this.GetContactDetailsAsync(contactId, null);
        }
        
        /// <remarks/>
        public void GetContactDetailsAsync(long contactId, object userState) {
            if ((this.GetContactDetailsOperationCompleted == null)) {
                this.GetContactDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactDetailsOperationCompleted);
            }
            this.InvokeAsync("GetContactDetails", new object[] {
                        contactId}, this.GetContactDetailsOperationCompleted, userState);
        }
        
        private void OnGetContactDetailsOperationCompleted(object arg) {
            if ((this.GetContactDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactDetailsCompleted(this, new GetContactDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/UpdateContactDetails", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateContactDetails(ContactInfo contact) {
            this.Invoke("UpdateContactDetails", new object[] {
                        contact});
        }
        
        /// <remarks/>
        public void UpdateContactDetailsAsync(ContactInfo contact) {
            this.UpdateContactDetailsAsync(contact, null);
        }
        
        /// <remarks/>
        public void UpdateContactDetailsAsync(ContactInfo contact, object userState) {
            if ((this.UpdateContactDetailsOperationCompleted == null)) {
                this.UpdateContactDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContactDetailsOperationCompleted);
            }
            this.InvokeAsync("UpdateContactDetails", new object[] {
                        contact}, this.UpdateContactDetailsOperationCompleted, userState);
        }
        
        private void OnUpdateContactDetailsOperationCompleted(object arg) {
            if ((this.UpdateContactDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContactDetailsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/AddContact", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddContact(ContactInfo contact) {
            this.Invoke("AddContact", new object[] {
                        contact});
        }
        
        /// <remarks/>
        public void AddContactAsync(ContactInfo contact) {
            this.AddContactAsync(contact, null);
        }
        
        /// <remarks/>
        public void AddContactAsync(ContactInfo contact, object userState) {
            if ((this.AddContactOperationCompleted == null)) {
                this.AddContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddContactOperationCompleted);
            }
            this.InvokeAsync("AddContact", new object[] {
                        contact}, this.AddContactOperationCompleted, userState);
        }
        
        private void OnAddContactOperationCompleted(object arg) {
            if ((this.AddContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/DeleteContact", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteContact(long contactId, int lastModifyBy) {
            this.Invoke("DeleteContact", new object[] {
                        contactId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void DeleteContactAsync(long contactId, int lastModifyBy) {
            this.DeleteContactAsync(contactId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void DeleteContactAsync(long contactId, int lastModifyBy, object userState) {
            if ((this.DeleteContactOperationCompleted == null)) {
                this.DeleteContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContactOperationCompleted);
            }
            this.InvokeAsync("DeleteContact", new object[] {
                        contactId,
                        lastModifyBy}, this.DeleteContactOperationCompleted, userState);
        }
        
        private void OnDeleteContactOperationCompleted(object arg) {
            if ((this.DeleteContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/RestoreContact", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RestoreContact(long contactId, int lastModifyBy) {
            this.Invoke("RestoreContact", new object[] {
                        contactId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void RestoreContactAsync(long contactId, int lastModifyBy) {
            this.RestoreContactAsync(contactId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void RestoreContactAsync(long contactId, int lastModifyBy, object userState) {
            if ((this.RestoreContactOperationCompleted == null)) {
                this.RestoreContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestoreContactOperationCompleted);
            }
            this.InvokeAsync("RestoreContact", new object[] {
                        contactId,
                        lastModifyBy}, this.RestoreContactOperationCompleted, userState);
        }
        
        private void OnRestoreContactOperationCompleted(object arg) {
            if ((this.RestoreContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestoreContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetArchivedContactListForPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContactInfo[] GetArchivedContactListForPlot(int plotId) {
            object[] results = this.Invoke("GetArchivedContactListForPlot", new object[] {
                        plotId});
            return ((ContactInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArchivedContactListForPlotAsync(int plotId) {
            this.GetArchivedContactListForPlotAsync(plotId, null);
        }
        
        /// <remarks/>
        public void GetArchivedContactListForPlotAsync(int plotId, object userState) {
            if ((this.GetArchivedContactListForPlotOperationCompleted == null)) {
                this.GetArchivedContactListForPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchivedContactListForPlotOperationCompleted);
            }
            this.InvokeAsync("GetArchivedContactListForPlot", new object[] {
                        plotId}, this.GetArchivedContactListForPlotOperationCompleted, userState);
        }
        
        private void OnGetArchivedContactListForPlotOperationCompleted(object arg) {
            if ((this.GetArchivedContactListForPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchivedContactListForPlotCompleted(this, new GetArchivedContactListForPlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/MoveContactToPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveContactToPlot(long contactId, int plotId, string newPlotName, int modifiedBy) {
            this.Invoke("MoveContactToPlot", new object[] {
                        contactId,
                        plotId,
                        newPlotName,
                        modifiedBy});
        }
        
        /// <remarks/>
        public void MoveContactToPlotAsync(long contactId, int plotId, string newPlotName, int modifiedBy) {
            this.MoveContactToPlotAsync(contactId, plotId, newPlotName, modifiedBy, null);
        }
        
        /// <remarks/>
        public void MoveContactToPlotAsync(long contactId, int plotId, string newPlotName, int modifiedBy, object userState) {
            if ((this.MoveContactToPlotOperationCompleted == null)) {
                this.MoveContactToPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveContactToPlotOperationCompleted);
            }
            this.InvokeAsync("MoveContactToPlot", new object[] {
                        contactId,
                        plotId,
                        newPlotName,
                        modifiedBy}, this.MoveContactToPlotOperationCompleted, userState);
        }
        
        private void OnMoveContactToPlotOperationCompleted(object arg) {
            if ((this.MoveContactToPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveContactToPlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/DeleteFarm", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFarm(int farmId, int lastModifyBy) {
            this.Invoke("DeleteFarm", new object[] {
                        farmId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void DeleteFarmAsync(int farmId, int lastModifyBy) {
            this.DeleteFarmAsync(farmId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void DeleteFarmAsync(int farmId, int lastModifyBy, object userState) {
            if ((this.DeleteFarmOperationCompleted == null)) {
                this.DeleteFarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFarmOperationCompleted);
            }
            this.InvokeAsync("DeleteFarm", new object[] {
                        farmId,
                        lastModifyBy}, this.DeleteFarmOperationCompleted, userState);
        }
        
        private void OnDeleteFarmOperationCompleted(object arg) {
            if ((this.DeleteFarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFarmCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/DeletePlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePlot(int plotId, int lastModifyBy) {
            this.Invoke("DeletePlot", new object[] {
                        plotId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void DeletePlotAsync(int plotId, int lastModifyBy) {
            this.DeletePlotAsync(plotId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void DeletePlotAsync(int plotId, int lastModifyBy, object userState) {
            if ((this.DeletePlotOperationCompleted == null)) {
                this.DeletePlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePlotOperationCompleted);
            }
            this.InvokeAsync("DeletePlot", new object[] {
                        plotId,
                        lastModifyBy}, this.DeletePlotOperationCompleted, userState);
        }
        
        private void OnDeletePlotOperationCompleted(object arg) {
            if ((this.DeletePlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/IsFarmNameDuplicateWhileAddingNewFarm", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFarmNameDuplicateWhileAddingNewFarm(int userId, string farmName) {
            object[] results = this.Invoke("IsFarmNameDuplicateWhileAddingNewFarm", new object[] {
                        userId,
                        farmName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFarmNameDuplicateWhileAddingNewFarmAsync(int userId, string farmName) {
            this.IsFarmNameDuplicateWhileAddingNewFarmAsync(userId, farmName, null);
        }
        
        /// <remarks/>
        public void IsFarmNameDuplicateWhileAddingNewFarmAsync(int userId, string farmName, object userState) {
            if ((this.IsFarmNameDuplicateWhileAddingNewFarmOperationCompleted == null)) {
                this.IsFarmNameDuplicateWhileAddingNewFarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFarmNameDuplicateWhileAddingNewFarmOperationCompleted);
            }
            this.InvokeAsync("IsFarmNameDuplicateWhileAddingNewFarm", new object[] {
                        userId,
                        farmName}, this.IsFarmNameDuplicateWhileAddingNewFarmOperationCompleted, userState);
        }
        
        private void OnIsFarmNameDuplicateWhileAddingNewFarmOperationCompleted(object arg) {
            if ((this.IsFarmNameDuplicateWhileAddingNewFarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFarmNameDuplicateWhileAddingNewFarmCompleted(this, new IsFarmNameDuplicateWhileAddingNewFarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/IsFarmNameDuplicateWhileEditingFarm", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFarmNameDuplicateWhileEditingFarm(int userId, int farmId, string farmName) {
            object[] results = this.Invoke("IsFarmNameDuplicateWhileEditingFarm", new object[] {
                        userId,
                        farmId,
                        farmName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFarmNameDuplicateWhileEditingFarmAsync(int userId, int farmId, string farmName) {
            this.IsFarmNameDuplicateWhileEditingFarmAsync(userId, farmId, farmName, null);
        }
        
        /// <remarks/>
        public void IsFarmNameDuplicateWhileEditingFarmAsync(int userId, int farmId, string farmName, object userState) {
            if ((this.IsFarmNameDuplicateWhileEditingFarmOperationCompleted == null)) {
                this.IsFarmNameDuplicateWhileEditingFarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFarmNameDuplicateWhileEditingFarmOperationCompleted);
            }
            this.InvokeAsync("IsFarmNameDuplicateWhileEditingFarm", new object[] {
                        userId,
                        farmId,
                        farmName}, this.IsFarmNameDuplicateWhileEditingFarmOperationCompleted, userState);
        }
        
        private void OnIsFarmNameDuplicateWhileEditingFarmOperationCompleted(object arg) {
            if ((this.IsFarmNameDuplicateWhileEditingFarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFarmNameDuplicateWhileEditingFarmCompleted(this, new IsFarmNameDuplicateWhileEditingFarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/IsPlotNameDuplicateWhileAddingNewPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPlotNameDuplicateWhileAddingNewPlot(int farmId, string plotName) {
            object[] results = this.Invoke("IsPlotNameDuplicateWhileAddingNewPlot", new object[] {
                        farmId,
                        plotName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPlotNameDuplicateWhileAddingNewPlotAsync(int farmId, string plotName) {
            this.IsPlotNameDuplicateWhileAddingNewPlotAsync(farmId, plotName, null);
        }
        
        /// <remarks/>
        public void IsPlotNameDuplicateWhileAddingNewPlotAsync(int farmId, string plotName, object userState) {
            if ((this.IsPlotNameDuplicateWhileAddingNewPlotOperationCompleted == null)) {
                this.IsPlotNameDuplicateWhileAddingNewPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPlotNameDuplicateWhileAddingNewPlotOperationCompleted);
            }
            this.InvokeAsync("IsPlotNameDuplicateWhileAddingNewPlot", new object[] {
                        farmId,
                        plotName}, this.IsPlotNameDuplicateWhileAddingNewPlotOperationCompleted, userState);
        }
        
        private void OnIsPlotNameDuplicateWhileAddingNewPlotOperationCompleted(object arg) {
            if ((this.IsPlotNameDuplicateWhileAddingNewPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPlotNameDuplicateWhileAddingNewPlotCompleted(this, new IsPlotNameDuplicateWhileAddingNewPlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/IsPlotNameDuplicateWhileEditingPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPlotNameDuplicateWhileEditingPlot(int farmId, int plotId, string plotName) {
            object[] results = this.Invoke("IsPlotNameDuplicateWhileEditingPlot", new object[] {
                        farmId,
                        plotId,
                        plotName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPlotNameDuplicateWhileEditingPlotAsync(int farmId, int plotId, string plotName) {
            this.IsPlotNameDuplicateWhileEditingPlotAsync(farmId, plotId, plotName, null);
        }
        
        /// <remarks/>
        public void IsPlotNameDuplicateWhileEditingPlotAsync(int farmId, int plotId, string plotName, object userState) {
            if ((this.IsPlotNameDuplicateWhileEditingPlotOperationCompleted == null)) {
                this.IsPlotNameDuplicateWhileEditingPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPlotNameDuplicateWhileEditingPlotOperationCompleted);
            }
            this.InvokeAsync("IsPlotNameDuplicateWhileEditingPlot", new object[] {
                        farmId,
                        plotId,
                        plotName}, this.IsPlotNameDuplicateWhileEditingPlotOperationCompleted, userState);
        }
        
        private void OnIsPlotNameDuplicateWhileEditingPlotOperationCompleted(object arg) {
            if ((this.IsPlotNameDuplicateWhileEditingPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPlotNameDuplicateWhileEditingPlotCompleted(this, new IsPlotNameDuplicateWhileEditingPlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/ExportContactListToExcel", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportContactListToExcel(int userId, int plotId) {
            object[] results = this.Invoke("ExportContactListToExcel", new object[] {
                        userId,
                        plotId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportContactListToExcelAsync(int userId, int plotId) {
            this.ExportContactListToExcelAsync(userId, plotId, null);
        }
        
        /// <remarks/>
        public void ExportContactListToExcelAsync(int userId, int plotId, object userState) {
            if ((this.ExportContactListToExcelOperationCompleted == null)) {
                this.ExportContactListToExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportContactListToExcelOperationCompleted);
            }
            this.InvokeAsync("ExportContactListToExcel", new object[] {
                        userId,
                        plotId}, this.ExportContactListToExcelOperationCompleted, userState);
        }
        
        private void OnExportContactListToExcelOperationCompleted(object arg) {
            if ((this.ExportContactListToExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportContactListToExcelCompleted(this, new ExportContactListToExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GenerateContactListFromArrayOfContactID", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContactInfo[] GenerateContactListFromArrayOfContactID(string[] contactIds) {
            object[] results = this.Invoke("GenerateContactListFromArrayOfContactID", new object[] {
                        contactIds});
            return ((ContactInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GenerateContactListFromArrayOfContactIDAsync(string[] contactIds) {
            this.GenerateContactListFromArrayOfContactIDAsync(contactIds, null);
        }
        
        /// <remarks/>
        public void GenerateContactListFromArrayOfContactIDAsync(string[] contactIds, object userState) {
            if ((this.GenerateContactListFromArrayOfContactIDOperationCompleted == null)) {
                this.GenerateContactListFromArrayOfContactIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateContactListFromArrayOfContactIDOperationCompleted);
            }
            this.InvokeAsync("GenerateContactListFromArrayOfContactID", new object[] {
                        contactIds}, this.GenerateContactListFromArrayOfContactIDOperationCompleted, userState);
        }
        
        private void OnGenerateContactListFromArrayOfContactIDOperationCompleted(object arg) {
            if ((this.GenerateContactListFromArrayOfContactIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateContactListFromArrayOfContactIDCompleted(this, new GenerateContactListFromArrayOfContactIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/DeleteFarmPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFarmPlot(int farmId, int lastModifyBy) {
            this.Invoke("DeleteFarmPlot", new object[] {
                        farmId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void DeleteFarmPlotAsync(int farmId, int lastModifyBy) {
            this.DeleteFarmPlotAsync(farmId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void DeleteFarmPlotAsync(int farmId, int lastModifyBy, object userState) {
            if ((this.DeleteFarmPlotOperationCompleted == null)) {
                this.DeleteFarmPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFarmPlotOperationCompleted);
            }
            this.InvokeAsync("DeleteFarmPlot", new object[] {
                        farmId,
                        lastModifyBy}, this.DeleteFarmPlotOperationCompleted, userState);
        }
        
        private void OnDeleteFarmPlotOperationCompleted(object arg) {
            if ((this.DeleteFarmPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFarmPlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/RestoreFarmPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RestoreFarmPlot(int farmId, int lastModifyBy) {
            this.Invoke("RestoreFarmPlot", new object[] {
                        farmId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void RestoreFarmPlotAsync(int farmId, int lastModifyBy) {
            this.RestoreFarmPlotAsync(farmId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void RestoreFarmPlotAsync(int farmId, int lastModifyBy, object userState) {
            if ((this.RestoreFarmPlotOperationCompleted == null)) {
                this.RestoreFarmPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestoreFarmPlotOperationCompleted);
            }
            this.InvokeAsync("RestoreFarmPlot", new object[] {
                        farmId,
                        lastModifyBy}, this.RestoreFarmPlotOperationCompleted, userState);
        }
        
        private void OnRestoreFarmPlotOperationCompleted(object arg) {
            if ((this.RestoreFarmPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestoreFarmPlotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/DeletePlotContact", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePlotContact(int plotId, int lastModifyBy) {
            this.Invoke("DeletePlotContact", new object[] {
                        plotId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void DeletePlotContactAsync(int plotId, int lastModifyBy) {
            this.DeletePlotContactAsync(plotId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void DeletePlotContactAsync(int plotId, int lastModifyBy, object userState) {
            if ((this.DeletePlotContactOperationCompleted == null)) {
                this.DeletePlotContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePlotContactOperationCompleted);
            }
            this.InvokeAsync("DeletePlotContact", new object[] {
                        plotId,
                        lastModifyBy}, this.DeletePlotContactOperationCompleted, userState);
        }
        
        private void OnDeletePlotContactOperationCompleted(object arg) {
            if ((this.DeletePlotContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePlotContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/RestorePlotContact", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RestorePlotContact(int plotId, int lastModifyBy) {
            this.Invoke("RestorePlotContact", new object[] {
                        plotId,
                        lastModifyBy});
        }
        
        /// <remarks/>
        public void RestorePlotContactAsync(int plotId, int lastModifyBy) {
            this.RestorePlotContactAsync(plotId, lastModifyBy, null);
        }
        
        /// <remarks/>
        public void RestorePlotContactAsync(int plotId, int lastModifyBy, object userState) {
            if ((this.RestorePlotContactOperationCompleted == null)) {
                this.RestorePlotContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestorePlotContactOperationCompleted);
            }
            this.InvokeAsync("RestorePlotContact", new object[] {
                        plotId,
                        lastModifyBy}, this.RestorePlotContactOperationCompleted, userState);
        }
        
        private void OnRestorePlotContactOperationCompleted(object arg) {
            if ((this.RestorePlotContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestorePlotContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/IsDefaultPlot", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsDefaultPlot(int plotId) {
            object[] results = this.Invoke("IsDefaultPlot", new object[] {
                        plotId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsDefaultPlotAsync(int plotId) {
            this.IsDefaultPlotAsync(plotId, null);
        }
        
        /// <remarks/>
        public void IsDefaultPlotAsync(int plotId, object userState) {
            if ((this.IsDefaultPlotOperationCompleted == null)) {
                this.IsDefaultPlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDefaultPlotOperationCompleted);
            }
            this.InvokeAsync("IsDefaultPlot", new object[] {
                        plotId}, this.IsDefaultPlotOperationCompleted, userState);
        }
        
        private void OnIsDefaultPlotOperationCompleted(object arg) {
            if ((this.IsDefaultPlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsDefaultPlotCompleted(this, new IsDefaultPlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/TotalActiveFarmCount", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TotalActiveFarmCount() {
            object[] results = this.Invoke("TotalActiveFarmCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TotalActiveFarmCountAsync() {
            this.TotalActiveFarmCountAsync(null);
        }
        
        /// <remarks/>
        public void TotalActiveFarmCountAsync(object userState) {
            if ((this.TotalActiveFarmCountOperationCompleted == null)) {
                this.TotalActiveFarmCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTotalActiveFarmCountOperationCompleted);
            }
            this.InvokeAsync("TotalActiveFarmCount", new object[0], this.TotalActiveFarmCountOperationCompleted, userState);
        }
        
        private void OnTotalActiveFarmCountOperationCompleted(object arg) {
            if ((this.TotalActiveFarmCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TotalActiveFarmCountCompleted(this, new TotalActiveFarmCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/TotalArchivedFarmCount", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TotalArchivedFarmCount() {
            object[] results = this.Invoke("TotalArchivedFarmCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TotalArchivedFarmCountAsync() {
            this.TotalArchivedFarmCountAsync(null);
        }
        
        /// <remarks/>
        public void TotalArchivedFarmCountAsync(object userState) {
            if ((this.TotalArchivedFarmCountOperationCompleted == null)) {
                this.TotalArchivedFarmCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTotalArchivedFarmCountOperationCompleted);
            }
            this.InvokeAsync("TotalArchivedFarmCount", new object[0], this.TotalArchivedFarmCountOperationCompleted, userState);
        }
        
        private void OnTotalArchivedFarmCountOperationCompleted(object arg) {
            if ((this.TotalArchivedFarmCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TotalArchivedFarmCountCompleted(this, new TotalArchivedFarmCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/TotalActivePlotCount", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TotalActivePlotCount() {
            object[] results = this.Invoke("TotalActivePlotCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TotalActivePlotCountAsync() {
            this.TotalActivePlotCountAsync(null);
        }
        
        /// <remarks/>
        public void TotalActivePlotCountAsync(object userState) {
            if ((this.TotalActivePlotCountOperationCompleted == null)) {
                this.TotalActivePlotCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTotalActivePlotCountOperationCompleted);
            }
            this.InvokeAsync("TotalActivePlotCount", new object[0], this.TotalActivePlotCountOperationCompleted, userState);
        }
        
        private void OnTotalActivePlotCountOperationCompleted(object arg) {
            if ((this.TotalActivePlotCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TotalActivePlotCountCompleted(this, new TotalActivePlotCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/TotalArchivedPlotCount", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TotalArchivedPlotCount() {
            object[] results = this.Invoke("TotalArchivedPlotCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TotalArchivedPlotCountAsync() {
            this.TotalArchivedPlotCountAsync(null);
        }
        
        /// <remarks/>
        public void TotalArchivedPlotCountAsync(object userState) {
            if ((this.TotalArchivedPlotCountOperationCompleted == null)) {
                this.TotalArchivedPlotCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTotalArchivedPlotCountOperationCompleted);
            }
            this.InvokeAsync("TotalArchivedPlotCount", new object[0], this.TotalArchivedPlotCountOperationCompleted, userState);
        }
        
        private void OnTotalArchivedPlotCountOperationCompleted(object arg) {
            if ((this.TotalArchivedPlotCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TotalArchivedPlotCountCompleted(this, new TotalArchivedPlotCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/TotalActiveContactCount", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long TotalActiveContactCount() {
            object[] results = this.Invoke("TotalActiveContactCount", new object[0]);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void TotalActiveContactCountAsync() {
            this.TotalActiveContactCountAsync(null);
        }
        
        /// <remarks/>
        public void TotalActiveContactCountAsync(object userState) {
            if ((this.TotalActiveContactCountOperationCompleted == null)) {
                this.TotalActiveContactCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTotalActiveContactCountOperationCompleted);
            }
            this.InvokeAsync("TotalActiveContactCount", new object[0], this.TotalActiveContactCountOperationCompleted, userState);
        }
        
        private void OnTotalActiveContactCountOperationCompleted(object arg) {
            if ((this.TotalActiveContactCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TotalActiveContactCountCompleted(this, new TotalActiveContactCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/TotalArchivedContactCount", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long TotalArchivedContactCount() {
            object[] results = this.Invoke("TotalArchivedContactCount", new object[0]);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void TotalArchivedContactCountAsync() {
            this.TotalArchivedContactCountAsync(null);
        }
        
        /// <remarks/>
        public void TotalArchivedContactCountAsync(object userState) {
            if ((this.TotalArchivedContactCountOperationCompleted == null)) {
                this.TotalArchivedContactCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTotalArchivedContactCountOperationCompleted);
            }
            this.InvokeAsync("TotalArchivedContactCount", new object[0], this.TotalArchivedContactCountOperationCompleted, userState);
        }
        
        private void OnTotalArchivedContactCountOperationCompleted(object arg) {
            if ((this.TotalArchivedContactCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TotalArchivedContactCountCompleted(this, new TotalArchivedContactCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/ReportForFarmDetails", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmDetailsReportInfo[] ReportForFarmDetails(int userId) {
            object[] results = this.Invoke("ReportForFarmDetails", new object[] {
                        userId});
            return ((FarmDetailsReportInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ReportForFarmDetailsAsync(int userId) {
            this.ReportForFarmDetailsAsync(userId, null);
        }
        
        /// <remarks/>
        public void ReportForFarmDetailsAsync(int userId, object userState) {
            if ((this.ReportForFarmDetailsOperationCompleted == null)) {
                this.ReportForFarmDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportForFarmDetailsOperationCompleted);
            }
            this.InvokeAsync("ReportForFarmDetails", new object[] {
                        userId}, this.ReportForFarmDetailsOperationCompleted, userState);
        }
        
        private void OnReportForFarmDetailsOperationCompleted(object arg) {
            if ((this.ReportForFarmDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportForFarmDetailsCompleted(this, new ReportForFarmDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetSearchFarmData", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmDetailsReportInfo[] GetSearchFarmData(string where) {
            object[] results = this.Invoke("GetSearchFarmData", new object[] {
                        where});
            return ((FarmDetailsReportInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSearchFarmDataAsync(string where) {
            this.GetSearchFarmDataAsync(where, null);
        }
        
        /// <remarks/>
        public void GetSearchFarmDataAsync(string where, object userState) {
            if ((this.GetSearchFarmDataOperationCompleted == null)) {
                this.GetSearchFarmDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSearchFarmDataOperationCompleted);
            }
            this.InvokeAsync("GetSearchFarmData", new object[] {
                        where}, this.GetSearchFarmDataOperationCompleted, userState);
        }
        
        private void OnGetSearchFarmDataOperationCompleted(object arg) {
            if ((this.GetSearchFarmDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSearchFarmDataCompleted(this, new GetSearchFarmDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetFirmUpStatusSummaryDetails", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FirmUpStatusReportInfo[] GetFirmUpStatusSummaryDetails(int userId, bool FirmUpStatus) {
            object[] results = this.Invoke("GetFirmUpStatusSummaryDetails", new object[] {
                        userId,
                        FirmUpStatus});
            return ((FirmUpStatusReportInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFirmUpStatusSummaryDetailsAsync(int userId, bool FirmUpStatus) {
            this.GetFirmUpStatusSummaryDetailsAsync(userId, FirmUpStatus, null);
        }
        
        /// <remarks/>
        public void GetFirmUpStatusSummaryDetailsAsync(int userId, bool FirmUpStatus, object userState) {
            if ((this.GetFirmUpStatusSummaryDetailsOperationCompleted == null)) {
                this.GetFirmUpStatusSummaryDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFirmUpStatusSummaryDetailsOperationCompleted);
            }
            this.InvokeAsync("GetFirmUpStatusSummaryDetails", new object[] {
                        userId,
                        FirmUpStatus}, this.GetFirmUpStatusSummaryDetailsOperationCompleted, userState);
        }
        
        private void OnGetFirmUpStatusSummaryDetailsOperationCompleted(object arg) {
            if ((this.GetFirmUpStatusSummaryDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFirmUpStatusSummaryDetailsCompleted(this, new GetFirmUpStatusSummaryDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetMailingLabels", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MailingLabelInfo[] GetMailingLabels(int userId, int farmId, int plotId) {
            object[] results = this.Invoke("GetMailingLabels", new object[] {
                        userId,
                        farmId,
                        plotId});
            return ((MailingLabelInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMailingLabelsAsync(int userId, int farmId, int plotId) {
            this.GetMailingLabelsAsync(userId, farmId, plotId, null);
        }
        
        /// <remarks/>
        public void GetMailingLabelsAsync(int userId, int farmId, int plotId, object userState) {
            if ((this.GetMailingLabelsOperationCompleted == null)) {
                this.GetMailingLabelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailingLabelsOperationCompleted);
            }
            this.InvokeAsync("GetMailingLabels", new object[] {
                        userId,
                        farmId,
                        plotId}, this.GetMailingLabelsOperationCompleted, userState);
        }
        
        private void OnGetMailingLabelsOperationCompleted(object arg) {
            if ((this.GetMailingLabelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailingLabelsCompleted(this, new GetMailingLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetFarmDataReportData", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FarmDataReportInfo[] GetFarmDataReportData(int userId, string where) {
            object[] results = this.Invoke("GetFarmDataReportData", new object[] {
                        userId,
                        where});
            return ((FarmDataReportInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFarmDataReportDataAsync(int userId, string where) {
            this.GetFarmDataReportDataAsync(userId, where, null);
        }
        
        /// <remarks/>
        public void GetFarmDataReportDataAsync(int userId, string where, object userState) {
            if ((this.GetFarmDataReportDataOperationCompleted == null)) {
                this.GetFarmDataReportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFarmDataReportDataOperationCompleted);
            }
            this.InvokeAsync("GetFarmDataReportData", new object[] {
                        userId,
                        where}, this.GetFarmDataReportDataOperationCompleted, userState);
        }
        
        private void OnGetFarmDataReportDataOperationCompleted(object arg) {
            if ((this.GetFarmDataReportDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFarmDataReportDataCompleted(this, new GetFarmDataReportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3130/BLLService/GetDeleteContactConsiquence", RequestNamespace="http://localhost:3130/BLLService/", ResponseNamespace="http://localhost:3130/BLLService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDeleteContactConsiquence(long contactId) {
            object[] results = this.Invoke("GetDeleteContactConsiquence", new object[] {
                        contactId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeleteContactConsiquenceAsync(long contactId) {
            this.GetDeleteContactConsiquenceAsync(contactId, null);
        }
        
        /// <remarks/>
        public void GetDeleteContactConsiquenceAsync(long contactId, object userState) {
            if ((this.GetDeleteContactConsiquenceOperationCompleted == null)) {
                this.GetDeleteContactConsiquenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeleteContactConsiquenceOperationCompleted);
            }
            this.InvokeAsync("GetDeleteContactConsiquence", new object[] {
                        contactId}, this.GetDeleteContactConsiquenceOperationCompleted, userState);
        }
        
        private void OnGetDeleteContactConsiquenceOperationCompleted(object arg) {
            if ((this.GetDeleteContactConsiquenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeleteContactConsiquenceCompleted(this, new GetDeleteContactConsiquenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class FarmInfo : BaseInfo {
        
        private int farmIdField;
        
        private string farmNameField;
        
        private MailingPlanInfo mailingPlanField;
        
        private PlotInfo[] plotsField;
        
        private System.DateTime createDateField;
        
        private int userIdField;
        
        private System.DateTime lastModifyDateField;
        
        private int lastModifyByField;
        
        private bool deletedField;
        
        private bool firmupField;
        
        private int plotCountField;
        
        private int contactCountField;
        
        /// <remarks/>
        public int FarmId {
            get {
                return this.farmIdField;
            }
            set {
                this.farmIdField = value;
            }
        }
        
        /// <remarks/>
        public string FarmName {
            get {
                return this.farmNameField;
            }
            set {
                this.farmNameField = value;
            }
        }
        
        /// <remarks/>
        public MailingPlanInfo MailingPlan {
            get {
                return this.mailingPlanField;
            }
            set {
                this.mailingPlanField = value;
            }
        }
        
        /// <remarks/>
        public PlotInfo[] Plots {
            get {
                return this.plotsField;
            }
            set {
                this.plotsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public int UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModifyDate {
            get {
                return this.lastModifyDateField;
            }
            set {
                this.lastModifyDateField = value;
            }
        }
        
        /// <remarks/>
        public int LastModifyBy {
            get {
                return this.lastModifyByField;
            }
            set {
                this.lastModifyByField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public bool Firmup {
            get {
                return this.firmupField;
            }
            set {
                this.firmupField = value;
            }
        }
        
        /// <remarks/>
        public int PlotCount {
            get {
                return this.plotCountField;
            }
            set {
                this.plotCountField = value;
            }
        }
        
        /// <remarks/>
        public int ContactCount {
            get {
                return this.contactCountField;
            }
            set {
                this.contactCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class MailingPlanInfo : BaseInfo {
        
        private int mailingPlanIdField;
        
        private string titleField;
        
        private System.DateTime createDateField;
        
        /// <remarks/>
        public int MailingPlanId {
            get {
                return this.mailingPlanIdField;
            }
            set {
                this.mailingPlanIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FarmDataReportInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MailingLabelInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FirmUpStatusReportInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FarmDetailsReportInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlotInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MailingPlanInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FarmInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public abstract partial class BaseInfo {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class FarmDataReportInfo : BaseInfo {
        
        private int agentIdField;
        
        private string agentFullNameField;
        
        private string agentPhoneField;
        
        private int farmCountField;
        
        private int farmIdField;
        
        private string farmNameField;
        
        private int mailingPlanIdField;
        
        private string mailingPlanNameField;
        
        private int plotCountField;
        
        private int contactCountField;
        
        private int deletedContactCountField;
        
        private System.DateTime farmCreatedDateField;
        
        private bool firmUpStatusField;
        
        /// <remarks/>
        public int AgentId {
            get {
                return this.agentIdField;
            }
            set {
                this.agentIdField = value;
            }
        }
        
        /// <remarks/>
        public string AgentFullName {
            get {
                return this.agentFullNameField;
            }
            set {
                this.agentFullNameField = value;
            }
        }
        
        /// <remarks/>
        public string AgentPhone {
            get {
                return this.agentPhoneField;
            }
            set {
                this.agentPhoneField = value;
            }
        }
        
        /// <remarks/>
        public int FarmCount {
            get {
                return this.farmCountField;
            }
            set {
                this.farmCountField = value;
            }
        }
        
        /// <remarks/>
        public int FarmId {
            get {
                return this.farmIdField;
            }
            set {
                this.farmIdField = value;
            }
        }
        
        /// <remarks/>
        public string FarmName {
            get {
                return this.farmNameField;
            }
            set {
                this.farmNameField = value;
            }
        }
        
        /// <remarks/>
        public int MailingPlanId {
            get {
                return this.mailingPlanIdField;
            }
            set {
                this.mailingPlanIdField = value;
            }
        }
        
        /// <remarks/>
        public string MailingPlanName {
            get {
                return this.mailingPlanNameField;
            }
            set {
                this.mailingPlanNameField = value;
            }
        }
        
        /// <remarks/>
        public int PlotCount {
            get {
                return this.plotCountField;
            }
            set {
                this.plotCountField = value;
            }
        }
        
        /// <remarks/>
        public int ContactCount {
            get {
                return this.contactCountField;
            }
            set {
                this.contactCountField = value;
            }
        }
        
        /// <remarks/>
        public int DeletedContactCount {
            get {
                return this.deletedContactCountField;
            }
            set {
                this.deletedContactCountField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FarmCreatedDate {
            get {
                return this.farmCreatedDateField;
            }
            set {
                this.farmCreatedDateField = value;
            }
        }
        
        /// <remarks/>
        public bool FirmUpStatus {
            get {
                return this.firmUpStatusField;
            }
            set {
                this.firmUpStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class MailingLabelInfo : BaseInfo {
        
        private string farmNameField;
        
        private string plotNameField;
        
        private string mailingLabel_1Field;
        
        private string mailingLabel_2Field;
        
        private string mailingLabel_3Field;
        
        /// <remarks/>
        public string FarmName {
            get {
                return this.farmNameField;
            }
            set {
                this.farmNameField = value;
            }
        }
        
        /// <remarks/>
        public string PlotName {
            get {
                return this.plotNameField;
            }
            set {
                this.plotNameField = value;
            }
        }
        
        /// <remarks/>
        public string MailingLabel_1 {
            get {
                return this.mailingLabel_1Field;
            }
            set {
                this.mailingLabel_1Field = value;
            }
        }
        
        /// <remarks/>
        public string MailingLabel_2 {
            get {
                return this.mailingLabel_2Field;
            }
            set {
                this.mailingLabel_2Field = value;
            }
        }
        
        /// <remarks/>
        public string MailingLabel_3 {
            get {
                return this.mailingLabel_3Field;
            }
            set {
                this.mailingLabel_3Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class FirmUpStatusReportInfo : BaseInfo {
        
        private int agentIdField;
        
        private string agentFullNameField;
        
        private string agentPhoneField;
        
        private int farmIdField;
        
        private string farmNameField;
        
        private int plotCountField;
        
        private int contactCountField;
        
        private int deletedContactCountField;
        
        private System.DateTime farmCreatedDateField;
        
        private bool firmUpStatusField;
        
        /// <remarks/>
        public int AgentId {
            get {
                return this.agentIdField;
            }
            set {
                this.agentIdField = value;
            }
        }
        
        /// <remarks/>
        public string AgentFullName {
            get {
                return this.agentFullNameField;
            }
            set {
                this.agentFullNameField = value;
            }
        }
        
        /// <remarks/>
        public string AgentPhone {
            get {
                return this.agentPhoneField;
            }
            set {
                this.agentPhoneField = value;
            }
        }
        
        /// <remarks/>
        public int FarmId {
            get {
                return this.farmIdField;
            }
            set {
                this.farmIdField = value;
            }
        }
        
        /// <remarks/>
        public string FarmName {
            get {
                return this.farmNameField;
            }
            set {
                this.farmNameField = value;
            }
        }
        
        /// <remarks/>
        public int PlotCount {
            get {
                return this.plotCountField;
            }
            set {
                this.plotCountField = value;
            }
        }
        
        /// <remarks/>
        public int ContactCount {
            get {
                return this.contactCountField;
            }
            set {
                this.contactCountField = value;
            }
        }
        
        /// <remarks/>
        public int DeletedContactCount {
            get {
                return this.deletedContactCountField;
            }
            set {
                this.deletedContactCountField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FarmCreatedDate {
            get {
                return this.farmCreatedDateField;
            }
            set {
                this.farmCreatedDateField = value;
            }
        }
        
        /// <remarks/>
        public bool FirmUpStatus {
            get {
                return this.firmUpStatusField;
            }
            set {
                this.firmUpStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class FarmDetailsReportInfo : BaseInfo {
        
        private int farmIdField;
        
        private string farmNameField;
        
        private string plotNameField;
        
        private long contactIdField;
        
        private int scheduleNumberField;
        
        private string ownerFullNameField;
        
        private int lotField;
        
        private string blockField;
        
        private string subdivisionField;
        
        private string filingField;
        
        private string siteAddressField;
        
        private int bedroomsField;
        
        private int fullBathField;
        
        private int threeQuarterBathField;
        
        private int halfBathField;
        
        private float acresField;
        
        private string actMktCombField;
        
        private string ownerFirstNameField;
        
        private string ownerLastNameField;
        
        private string ownerAddress1Field;
        
        private string ownerAddress2Field;
        
        private string ownerCityField;
        
        private string ownerStateField;
        
        private string ownerZipField;
        
        private string ownerCountryField;
        
        private System.DateTime saleDateField;
        
        private decimal transAmountField;
        
        private System.DateTime createDateField;
        
        private System.DateTime lastModifyDateField;
        
        private int lastModifyByField;
        
        private int plotIdField;
        
        private bool deletedField;
        
        /// <remarks/>
        public int FarmId {
            get {
                return this.farmIdField;
            }
            set {
                this.farmIdField = value;
            }
        }
        
        /// <remarks/>
        public string FarmName {
            get {
                return this.farmNameField;
            }
            set {
                this.farmNameField = value;
            }
        }
        
        /// <remarks/>
        public string PlotName {
            get {
                return this.plotNameField;
            }
            set {
                this.plotNameField = value;
            }
        }
        
        /// <remarks/>
        public long ContactId {
            get {
                return this.contactIdField;
            }
            set {
                this.contactIdField = value;
            }
        }
        
        /// <remarks/>
        public int ScheduleNumber {
            get {
                return this.scheduleNumberField;
            }
            set {
                this.scheduleNumberField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerFullName {
            get {
                return this.ownerFullNameField;
            }
            set {
                this.ownerFullNameField = value;
            }
        }
        
        /// <remarks/>
        public int Lot {
            get {
                return this.lotField;
            }
            set {
                this.lotField = value;
            }
        }
        
        /// <remarks/>
        public string Block {
            get {
                return this.blockField;
            }
            set {
                this.blockField = value;
            }
        }
        
        /// <remarks/>
        public string Subdivision {
            get {
                return this.subdivisionField;
            }
            set {
                this.subdivisionField = value;
            }
        }
        
        /// <remarks/>
        public string Filing {
            get {
                return this.filingField;
            }
            set {
                this.filingField = value;
            }
        }
        
        /// <remarks/>
        public string SiteAddress {
            get {
                return this.siteAddressField;
            }
            set {
                this.siteAddressField = value;
            }
        }
        
        /// <remarks/>
        public int Bedrooms {
            get {
                return this.bedroomsField;
            }
            set {
                this.bedroomsField = value;
            }
        }
        
        /// <remarks/>
        public int FullBath {
            get {
                return this.fullBathField;
            }
            set {
                this.fullBathField = value;
            }
        }
        
        /// <remarks/>
        public int ThreeQuarterBath {
            get {
                return this.threeQuarterBathField;
            }
            set {
                this.threeQuarterBathField = value;
            }
        }
        
        /// <remarks/>
        public int HalfBath {
            get {
                return this.halfBathField;
            }
            set {
                this.halfBathField = value;
            }
        }
        
        /// <remarks/>
        public float Acres {
            get {
                return this.acresField;
            }
            set {
                this.acresField = value;
            }
        }
        
        /// <remarks/>
        public string ActMktComb {
            get {
                return this.actMktCombField;
            }
            set {
                this.actMktCombField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerFirstName {
            get {
                return this.ownerFirstNameField;
            }
            set {
                this.ownerFirstNameField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerLastName {
            get {
                return this.ownerLastNameField;
            }
            set {
                this.ownerLastNameField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerAddress1 {
            get {
                return this.ownerAddress1Field;
            }
            set {
                this.ownerAddress1Field = value;
            }
        }
        
        /// <remarks/>
        public string OwnerAddress2 {
            get {
                return this.ownerAddress2Field;
            }
            set {
                this.ownerAddress2Field = value;
            }
        }
        
        /// <remarks/>
        public string OwnerCity {
            get {
                return this.ownerCityField;
            }
            set {
                this.ownerCityField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerState {
            get {
                return this.ownerStateField;
            }
            set {
                this.ownerStateField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerZip {
            get {
                return this.ownerZipField;
            }
            set {
                this.ownerZipField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerCountry {
            get {
                return this.ownerCountryField;
            }
            set {
                this.ownerCountryField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SaleDate {
            get {
                return this.saleDateField;
            }
            set {
                this.saleDateField = value;
            }
        }
        
        /// <remarks/>
        public decimal TransAmount {
            get {
                return this.transAmountField;
            }
            set {
                this.transAmountField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModifyDate {
            get {
                return this.lastModifyDateField;
            }
            set {
                this.lastModifyDateField = value;
            }
        }
        
        /// <remarks/>
        public int LastModifyBy {
            get {
                return this.lastModifyByField;
            }
            set {
                this.lastModifyByField = value;
            }
        }
        
        /// <remarks/>
        public int PlotId {
            get {
                return this.plotIdField;
            }
            set {
                this.plotIdField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class ContactInfo : BaseInfo {
        
        private long contactIdField;
        
        private int scheduleNumberField;
        
        private string ownerFullNameField;
        
        private int lotField;
        
        private string blockField;
        
        private string subdivisionField;
        
        private string filingField;
        
        private string siteAddressField;
        
        private int bedroomsField;
        
        private int fullBathField;
        
        private int threeQuarterBathField;
        
        private int halfBathField;
        
        private float acresField;
        
        private string actMktCombField;
        
        private string ownerFirstNameField;
        
        private string ownerLastNameField;
        
        private string ownerAddress1Field;
        
        private string ownerAddress2Field;
        
        private string ownerCityField;
        
        private string ownerStateField;
        
        private string ownerZipField;
        
        private string ownerCountryField;
        
        private System.DateTime saleDateField;
        
        private decimal transAmountField;
        
        private System.DateTime createDateField;
        
        private System.DateTime lastModifyDateField;
        
        private int lastModifyByField;
        
        private int plotIdField;
        
        /// <remarks/>
        public long ContactId {
            get {
                return this.contactIdField;
            }
            set {
                this.contactIdField = value;
            }
        }
        
        /// <remarks/>
        public int ScheduleNumber {
            get {
                return this.scheduleNumberField;
            }
            set {
                this.scheduleNumberField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerFullName {
            get {
                return this.ownerFullNameField;
            }
            set {
                this.ownerFullNameField = value;
            }
        }
        
        /// <remarks/>
        public int Lot {
            get {
                return this.lotField;
            }
            set {
                this.lotField = value;
            }
        }
        
        /// <remarks/>
        public string Block {
            get {
                return this.blockField;
            }
            set {
                this.blockField = value;
            }
        }
        
        /// <remarks/>
        public string Subdivision {
            get {
                return this.subdivisionField;
            }
            set {
                this.subdivisionField = value;
            }
        }
        
        /// <remarks/>
        public string Filing {
            get {
                return this.filingField;
            }
            set {
                this.filingField = value;
            }
        }
        
        /// <remarks/>
        public string SiteAddress {
            get {
                return this.siteAddressField;
            }
            set {
                this.siteAddressField = value;
            }
        }
        
        /// <remarks/>
        public int Bedrooms {
            get {
                return this.bedroomsField;
            }
            set {
                this.bedroomsField = value;
            }
        }
        
        /// <remarks/>
        public int FullBath {
            get {
                return this.fullBathField;
            }
            set {
                this.fullBathField = value;
            }
        }
        
        /// <remarks/>
        public int ThreeQuarterBath {
            get {
                return this.threeQuarterBathField;
            }
            set {
                this.threeQuarterBathField = value;
            }
        }
        
        /// <remarks/>
        public int HalfBath {
            get {
                return this.halfBathField;
            }
            set {
                this.halfBathField = value;
            }
        }
        
        /// <remarks/>
        public float Acres {
            get {
                return this.acresField;
            }
            set {
                this.acresField = value;
            }
        }
        
        /// <remarks/>
        public string ActMktComb {
            get {
                return this.actMktCombField;
            }
            set {
                this.actMktCombField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerFirstName {
            get {
                return this.ownerFirstNameField;
            }
            set {
                this.ownerFirstNameField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerLastName {
            get {
                return this.ownerLastNameField;
            }
            set {
                this.ownerLastNameField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerAddress1 {
            get {
                return this.ownerAddress1Field;
            }
            set {
                this.ownerAddress1Field = value;
            }
        }
        
        /// <remarks/>
        public string OwnerAddress2 {
            get {
                return this.ownerAddress2Field;
            }
            set {
                this.ownerAddress2Field = value;
            }
        }
        
        /// <remarks/>
        public string OwnerCity {
            get {
                return this.ownerCityField;
            }
            set {
                this.ownerCityField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerState {
            get {
                return this.ownerStateField;
            }
            set {
                this.ownerStateField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerZip {
            get {
                return this.ownerZipField;
            }
            set {
                this.ownerZipField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerCountry {
            get {
                return this.ownerCountryField;
            }
            set {
                this.ownerCountryField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SaleDate {
            get {
                return this.saleDateField;
            }
            set {
                this.saleDateField = value;
            }
        }
        
        /// <remarks/>
        public decimal TransAmount {
            get {
                return this.transAmountField;
            }
            set {
                this.transAmountField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModifyDate {
            get {
                return this.lastModifyDateField;
            }
            set {
                this.lastModifyDateField = value;
            }
        }
        
        /// <remarks/>
        public int LastModifyBy {
            get {
                return this.lastModifyByField;
            }
            set {
                this.lastModifyByField = value;
            }
        }
        
        /// <remarks/>
        public int PlotId {
            get {
                return this.plotIdField;
            }
            set {
                this.plotIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public partial class PlotInfo : BaseInfo {
        
        private int plotIdField;
        
        private string plotNameField;
        
        private System.DateTime createDateField;
        
        private int farmIdField;
        
        private System.DateTime lastModifyDateField;
        
        private int lastModifyByField;
        
        private bool deletedField;
        
        private int contactCountField;
        
        private ContactInfo[] contactsField;
        
        /// <remarks/>
        public int PlotId {
            get {
                return this.plotIdField;
            }
            set {
                this.plotIdField = value;
            }
        }
        
        /// <remarks/>
        public string PlotName {
            get {
                return this.plotNameField;
            }
            set {
                this.plotNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public int FarmId {
            get {
                return this.farmIdField;
            }
            set {
                this.farmIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModifyDate {
            get {
                return this.lastModifyDateField;
            }
            set {
                this.lastModifyDateField = value;
            }
        }
        
        /// <remarks/>
        public int LastModifyBy {
            get {
                return this.lastModifyByField;
            }
            set {
                this.lastModifyByField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public int ContactCount {
            get {
                return this.contactCountField;
            }
            set {
                this.contactCountField = value;
            }
        }
        
        /// <remarks/>
        public ContactInfo[] Contacts {
            get {
                return this.contactsField;
            }
            set {
                this.contactsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:3130/BLLService/")]
    public enum ContactFileType {
        
        /// <remarks/>
        Excel,
        
        /// <remarks/>
        Csv,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserNameCompletedEventHandler(object sender, GetUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFarmListForUserCompletedEventHandler(object sender, GetFarmListForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFarmListForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFarmListForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFarmSummaryCompletedEventHandler(object sender, GetFarmSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFarmSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFarmSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetArchivedFarmSummaryCompletedEventHandler(object sender, GetArchivedFarmSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchivedFarmSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchivedFarmSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetArchivedFarmSummaryDetailsCompletedEventHandler(object sender, GetArchivedFarmSummaryDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchivedFarmSummaryDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchivedFarmSummaryDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPlotListForFarmCompletedEventHandler(object sender, GetPlotListForFarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlotListForFarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlotListForFarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlotInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlotInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetArchivedPlotSummaryCompletedEventHandler(object sender, GetArchivedPlotSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchivedPlotSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchivedPlotSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlotInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlotInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetArchivedPlotSummaryDetailsCompletedEventHandler(object sender, GetArchivedPlotSummaryDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchivedPlotSummaryDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchivedPlotSummaryDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlotInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlotInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMailingPlanListCompletedEventHandler(object sender, GetMailingPlanListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailingPlanListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailingPlanListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MailingPlanInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MailingPlanInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFarmListFromFileCompletedEventHandler(object sender, GetFarmListFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFarmListFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFarmListFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContactInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContactInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreateFarmPlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreatePlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreatePlotForMoveContactsCompletedEventHandler(object sender, CreatePlotForMoveContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePlotForMoveContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePlotForMoveContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdatePlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateFarmPlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFarmDetailCompletedEventHandler(object sender, GetFarmDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFarmDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFarmDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPlotCountForFarmCompletedEventHandler(object sender, GetPlotCountForFarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlotCountForFarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlotCountForFarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPlotListSummaryForFarmCompletedEventHandler(object sender, GetPlotListSummaryForFarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlotListSummaryForFarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlotListSummaryForFarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlotInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlotInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPlotDetailCompletedEventHandler(object sender, GetPlotDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlotDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlotDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlotInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlotInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsFarmExistsCompletedEventHandler(object sender, IsFarmExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFarmExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFarmExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetContactCountForPlotCompletedEventHandler(object sender, GetContactCountForPlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactCountForPlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactCountForPlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsPlotExistsCompletedEventHandler(object sender, IsPlotExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPlotExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPlotExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserIdForFarmCompletedEventHandler(object sender, GetUserIdForFarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserIdForFarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserIdForFarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserIdForPlotCompletedEventHandler(object sender, GetUserIdForPlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserIdForPlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserIdForPlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetContactListForPlotCompletedEventHandler(object sender, GetContactListForPlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactListForPlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactListForPlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContactInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContactInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetContactDetailsCompletedEventHandler(object sender, GetContactDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContactInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContactInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateContactDetailsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RestoreContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetArchivedContactListForPlotCompletedEventHandler(object sender, GetArchivedContactListForPlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchivedContactListForPlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchivedContactListForPlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContactInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContactInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MoveContactToPlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteFarmCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeletePlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsFarmNameDuplicateWhileAddingNewFarmCompletedEventHandler(object sender, IsFarmNameDuplicateWhileAddingNewFarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFarmNameDuplicateWhileAddingNewFarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFarmNameDuplicateWhileAddingNewFarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsFarmNameDuplicateWhileEditingFarmCompletedEventHandler(object sender, IsFarmNameDuplicateWhileEditingFarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFarmNameDuplicateWhileEditingFarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFarmNameDuplicateWhileEditingFarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsPlotNameDuplicateWhileAddingNewPlotCompletedEventHandler(object sender, IsPlotNameDuplicateWhileAddingNewPlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPlotNameDuplicateWhileAddingNewPlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPlotNameDuplicateWhileAddingNewPlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsPlotNameDuplicateWhileEditingPlotCompletedEventHandler(object sender, IsPlotNameDuplicateWhileEditingPlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPlotNameDuplicateWhileEditingPlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPlotNameDuplicateWhileEditingPlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExportContactListToExcelCompletedEventHandler(object sender, ExportContactListToExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportContactListToExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportContactListToExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateContactListFromArrayOfContactIDCompletedEventHandler(object sender, GenerateContactListFromArrayOfContactIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateContactListFromArrayOfContactIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateContactListFromArrayOfContactIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContactInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContactInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteFarmPlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RestoreFarmPlotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeletePlotContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RestorePlotContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsDefaultPlotCompletedEventHandler(object sender, IsDefaultPlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsDefaultPlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsDefaultPlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TotalActiveFarmCountCompletedEventHandler(object sender, TotalActiveFarmCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TotalActiveFarmCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TotalActiveFarmCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TotalArchivedFarmCountCompletedEventHandler(object sender, TotalArchivedFarmCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TotalArchivedFarmCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TotalArchivedFarmCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TotalActivePlotCountCompletedEventHandler(object sender, TotalActivePlotCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TotalActivePlotCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TotalActivePlotCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TotalArchivedPlotCountCompletedEventHandler(object sender, TotalArchivedPlotCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TotalArchivedPlotCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TotalArchivedPlotCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TotalActiveContactCountCompletedEventHandler(object sender, TotalActiveContactCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TotalActiveContactCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TotalActiveContactCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TotalArchivedContactCountCompletedEventHandler(object sender, TotalArchivedContactCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TotalArchivedContactCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TotalArchivedContactCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportForFarmDetailsCompletedEventHandler(object sender, ReportForFarmDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportForFarmDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportForFarmDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmDetailsReportInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmDetailsReportInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSearchFarmDataCompletedEventHandler(object sender, GetSearchFarmDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSearchFarmDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSearchFarmDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmDetailsReportInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmDetailsReportInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFirmUpStatusSummaryDetailsCompletedEventHandler(object sender, GetFirmUpStatusSummaryDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFirmUpStatusSummaryDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFirmUpStatusSummaryDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FirmUpStatusReportInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FirmUpStatusReportInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMailingLabelsCompletedEventHandler(object sender, GetMailingLabelsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailingLabelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailingLabelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MailingLabelInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MailingLabelInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFarmDataReportDataCompletedEventHandler(object sender, GetFarmDataReportDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFarmDataReportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFarmDataReportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FarmDataReportInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FarmDataReportInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDeleteContactConsiquenceCompletedEventHandler(object sender, GetDeleteContactConsiquenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeleteContactConsiquenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeleteContactConsiquenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591